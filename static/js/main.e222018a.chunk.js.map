{"version":3,"sources":["components/Textfm.js","components/Navbar.js","components/TextArea.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Textfm","props","useState","text","setText","className","htmlFor","value","onChange","event","console","log","target","id","rows","onClick","newT","toUpperCase","toLowerCase","length","str","count","Array","i","len","charCodeAt","max","result","words","match","occurances","word","mostRepeatedWord","document","getElementById","select","navigator","clipboard","writeText","split","join","Navbar","href","title","type","aboutTxt","role","placeholder","defaultProps","TextArea","characterCount","setCharacterCount","col","e","About","color","backgroundColor","styleSP","setStyleSP","style","App","heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e222018a.chunk.js","sourcesContent":["\r\n// Type rfc => for react function based component //\r\n\r\n\r\nimport React,{useState}  from 'react'\r\n// const [count,setCount]=useState(0);      //react hooks \r\n\r\nexport default function Textfm(props) {\r\n\r\n\r\n    const clickspUp=()=>\r\n    {\r\n          console.log(\"Uppercase here\\n\" + text);\r\n          setText(\"you have clicked on function upper\\n\")\r\n          let newT=text.toUpperCase();\r\n          setText(newT);\r\n    }\r\n\r\n\r\n    const clickspLw=()=>\r\n    {\r\n          console.log(\"Uppercase here\\n\" + text);\r\n          setText(\"you have clicked on function upper\\n\")\r\n          let newT=text.toLowerCase();\r\n          setText(newT);\r\n    }\r\n\r\n\r\n    const clickMax=()=>\r\n    {\r\n      if(text.length===0)\r\n      {\r\n        setText(\"not defined\");\r\n\r\n      }\r\n      else{\r\n        let str=text;\r\n        let ASCII_SIZE = 256;\r\n        let count = new Array(ASCII_SIZE);\r\n        for (let i = 0; i < ASCII_SIZE; i++)\r\n        {\r\n            count[i] = 0;\r\n        }\r\n         \r\n        // Construct character count array from the input\r\n        // string.\r\n        let len = str.length;\r\n        for (let i = 0; i < len; i++)\r\n        {\r\n            count[str[i].charCodeAt(0)] += 1;\r\n        }\r\n        let max = -1;   // Initialize max count\r\n        let result = ' ';   // Initialize result\r\n         \r\n        // Traversing through the string and maintaining\r\n        // the count of each character\r\n        for (let i = 0; i < len; i++)\r\n        {\r\n            if (max < count[str[i].charCodeAt(0)])\r\n            {\r\n                max = count[str[i].charCodeAt(0)];\r\n                result = str[i];\r\n            }\r\n        }\r\n        setText(result);\r\n      }\r\n    }\r\n\r\n    const clickMaxW=()=>\r\n    {\r\n        let str=text;\r\n        let words = str.match(/\\w+/g); // splitting words\r\n  let occurances = {}; \r\n  for (let word of words) { \r\n    if (occurances[word]) { \r\n      occurances[word]++; \r\n    } \r\n    else { \r\n      occurances[word] = 1; \r\n    } \r\n  } \r\n  // Here occurances will give count of each word\r\n  let max = 0; \r\n  let mostRepeatedWord = ''; \r\n  for (let word of words) { \r\n    if (occurances[word] > max) \r\n    { \r\n      max = occurances[word]; mostRepeatedWord = word; \r\n    } \r\n  } \r\n\r\n  setText(mostRepeatedWord);\r\n        \r\n    }\r\n    const clickClear=()=>\r\n    {\r\n        console.log(\"Clear\") ;\r\n        setText(\"\");\r\n    }\r\n    \r\n    const clickCopy=()=>\r\n    {\r\n      console.log('click Copy');\r\n      var text=document.getElementById(\"exampleFormControlTextarea1\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const clickSpace=()=>\r\n    {\r\n        console.log(\"handling space\") ;\r\n        let str=text.split(/[ ]+/);\r\n        setText(str.join(\" \"));\r\n    }\r\n\r\n\r\n    const handleOnChange=(event)=>\r\n    {\r\n        console.log(\"Changed\") ;\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text,setText]=useState('Enter the text');\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n <div className=\"container mt-5\">\r\n     {/*\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n<label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">Name</label>\r\n  <input type=\"text\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Name\"/>\r\n</div>\r\n <div className=\"mb-3\">\r\n  <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">Email address</label>\r\n  <input type=\"email\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"name@example.com\"/>\r\n</div>  */}\r\n\r\n<div className=\" container mb-3\">\r\n  <label htmlFor=\"exampleFormControlTextarea1\"  className=\"form-label\"><h1>ALPHABET_CONVERTERS</h1></label>\r\n  <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\r\n</div>\r\n\r\n\r\n<button className=\"btn btn-primary mx-2\" onClick={clickspUp}>\r\nConvert Upper from lower\r\n</button>\r\n\r\n<button className=\"btn btn-secondary mx-2\" onClick={clickspLw}>\r\nConvert Lower from Upper\r\n</button>\r\n\r\n<button className=\"btn btn-info mx-2\" onClick={clickMax}>\r\nMax repeated char\r\n</button>\r\n\r\n<button className=\"btn btn-success mx-2\" onClick={clickMaxW}>\r\nMax repeated word\r\n</button>\r\n\r\n<button className=\"btn btn-warning mx-2\" onClick={clickCopy}>\r\n Copy_Text\r\n</button>\r\n\r\n<button className=\"btn btn-success mx-2\" onClick={clickSpace}>\r\nManage Space\r\n</button>\r\n\r\n<button className=\"btn btn-info mx-2\" onClick={clickClear}>\r\nClear Terminal\r\n</button>\r\n\r\n</div>\r\n<div className=\"container mt-5\">\r\n<hr/>\r\n<h1>Overall Summary</h1>\r\n<p>Letters == {text.length}</p>\r\n<p>Words == {text.split(\" \").length}</p>\r\n<p>Time == {0.008*text.split(\" \").length}</p>\r\n<p>Current string == {text}</p>\r\n\r\n<hr/>\r\n\r\n</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'   //type impt for it\r\n\r\n//let name=\"saurabh patil\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div><nav className=\"navbar navbar-expand-lg navbar-light bg-info pt-3\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\" >{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">HOME</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutTxt}</a>\r\n              </li>\r\n\r\n              <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  OPTIONS\r\n                </a>\r\n\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li><a className=\"dropdown-item\" href=\"/\">A</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">B</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">C</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">D</a></li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n               \r\n              </li>\r\n            </ul>\r\n\r\n            <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n     \r\n           {/* <div className=\"blank\">\r\n            <nav>\r\n              <li>HOME</li>\r\n              <li>ABOUS US</li>\r\n              <li>CONTACT US</li>\r\n              <li>BACK</li>\r\n            </nav>\r\n            </div>\r\n      \r\n          <div className=\"container\">\r\n          <h1>hello <b>{name}</b></h1>\r\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Impedit, nisi quos! Aliquam quasi, \r\n          ipsam minus id in distinctio labore totam asperiores nesciunt cum.\r\n          </div>  */}\r\n      \r\n          \r\n          \r\n          \r\n          </div>\r\n\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\n    aboutTxt:PropTypes.string,\r\n}\r\n\r\n\r\nNavbar.defaultProps={\r\n    title:\"set name\",\r\n    aboutTxt:\"ABOUT US\"\r\n}\r\n\r\n// Navbar.defaultProps={\r\n//     title:\"set name\",\r\n//     aboutTxt:\"set about\"\r\n// }\r\n\r\n\r\n\r\n//type rfc fot above syntax,impt for props syntax","import React, { useState } from \"react\";\r\n\r\nconst TextArea = () => {\r\n\r\n    \r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    return (\r\n        <>\r\n        \r\n      <div className=\"container mt-5\">\r\n      <h1>Counting_Words</h1>\r\n        <textarea className=\"form-control\"\r\n          placeholder=\"Enter you data here!\" rows=\"5\" col=\"10\"\r\n          onChange={(e) => setCharacterCount(e.target.value.length)}\r\n        ></textarea>\r\n        <p>Total Number of characters: {characterCount}</p>\r\n      </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default TextArea;  ","\r\n//type rfc for react component based functions//\r\n\r\n\r\nimport React ,{ useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [styleSP, setStyleSP] = useState(\r\n        {\r\n          color:\"red\",\r\n          backgroundColor:\"yellow\",\r\n\r\n        }\r\n    );\r\n\r\n    const sty=()=>{\r\n        \r\n        if(styleSP.color === \"red\")\r\n        {\r\n            setStyleSP({\r\n                color:\"green\",\r\n                backgroundColor:\"violet\",\r\n            })\r\n        }\r\n        else{\r\n\r\n            \r\n                setStyleSP({\r\n                    color:\"red\",\r\n                    backgroundColor:\"yellow\",\r\n                })\r\n            \r\n    \r\n\r\n             }\r\n    }\r\n\r\n   \r\n    \r\n    return (\r\n            <>\r\n\r\n            <div className=\"container mt-5\" style={styleSP}>\r\n                <h2>ABOUT US</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNameNamees that we use to style each element. These classNameNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div className=\"container mt-5\">\r\n<button className=\"btn btn-success\" onClick={sty}>new Theme Mode</button>\r\n</div>\r\n\r\n</div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n","\nimport './App.css';\nimport TextFm from './components/Textfm';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea'\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <>\n    <Navbar title=\"$$-app\"/> \n    <TextFm heading=\"text-form\"/>\n    <TextArea/>\n    <About/>\n  \n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}