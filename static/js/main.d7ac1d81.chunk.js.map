{"version":3,"sources":["components/Textfm.js","components/Navbar.js","components/TextArea.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Textfm","props","useState","text","setText","className","htmlFor","style","mode","color","backgroundColor","value","onChange","event","console","log","target","id","rows","onClick","newT","toUpperCase","showAlert","toLowerCase","length","str","count","Array","i","len","charCodeAt","max","result","words","match","occurances","word","mostRepeatedWord","document","getElementById","select","navigator","clipboard","writeText","split","join","Navbar","to","title","type","aboutTxt","href","role","enableMode","enableModex","defaultProps","TextArea","characterCount","setCharacterCount","placeholder","col","e","About","styleSP","setStyleSP","Alert","alert","lower","charAt","slice","capitals","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","element","heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d7ac1d81.chunk.js","sourcesContent":["\r\n// Type rfc => for react function based component //\r\n\r\n\r\nimport React,{useState}  from 'react'\r\n// const [count,setCount]=useState(0);      //react hooks \r\n\r\nexport default function Textfm(props) {\r\n\r\n\r\n    const clickspUp=()=>\r\n    {\r\n          console.log(\"Uppercase here\\n\" + text);\r\n          setText(\"you have clicked on function upper\\n\")\r\n          let newT=text.toUpperCase();\r\n          setText(newT);\r\n          props.showAlert(\"capital format\",\"success\");\r\n    }\r\n\r\n\r\n    const clickspLw=()=>\r\n    {\r\n          console.log(\"Uppercase here\\n\" + text);\r\n          setText(\"you have clicked on function upper\\n\")\r\n          let newT=text.toLowerCase();\r\n          setText(newT);\r\n          props.showAlert(\"smaller format\",\"success\");  \r\n    }\r\n\r\n\r\n    const clickMax=()=>\r\n    {\r\n      if(text.length===0)\r\n      {\r\n        setText(\"not defined\");\r\n\r\n      }\r\n      else{\r\n        let str=text;\r\n        let ASCII_SIZE = 256;\r\n        let count = new Array(ASCII_SIZE);\r\n        for (let i = 0; i < ASCII_SIZE; i++)\r\n        {\r\n            count[i] = 0;\r\n        }\r\n         \r\n        // Construct character count array from the input\r\n        // string.\r\n        let len = str.length;\r\n        for (let i = 0; i < len; i++)\r\n        {\r\n            count[str[i].charCodeAt(0)] += 1;\r\n        }\r\n        let max = -1;   // Initialize max count\r\n        let result = ' ';   // Initialize result\r\n         \r\n        // Traversing through the string and maintaining\r\n        // the count of each character\r\n        for (let i = 0; i < len; i++)\r\n        {\r\n            if (max < count[str[i].charCodeAt(0)])\r\n            {\r\n                max = count[str[i].charCodeAt(0)];\r\n                result = str[i];\r\n            }\r\n        }\r\n        setText(result);\r\n        props.showAlert(\"most-repeated char is here!\",\"success\");\r\n      }\r\n    }\r\n\r\n    const clickMaxW=()=>\r\n    {\r\n        let str=text;\r\n        let words = str.match(/\\w+/g); // splitting words\r\n  let occurances = {}; \r\n  for (let word of words) { \r\n    if (occurances[word]) { \r\n      occurances[word]++; \r\n    } \r\n    else { \r\n      occurances[word] = 1; \r\n    } \r\n  } \r\n  // Here occurances will give count of each word\r\n  let max = 0; \r\n  let mostRepeatedWord = ''; \r\n  for (let word of words) { \r\n    if (occurances[word] > max) \r\n    { \r\n      max = occurances[word]; mostRepeatedWord = word; \r\n    } \r\n  } \r\n\r\n  setText(mostRepeatedWord);\r\n  props.showAlert(\"most-repeated word is here!\",\"success\");\r\n        \r\n    }\r\n    const clickClear=()=>\r\n    {\r\n        console.log(\"Clear\") ;\r\n        setText(\"\");\r\n        props.showAlert(\"textarea is cleared!\",\"success\");\r\n    }\r\n    \r\n    const clickCopy=()=>\r\n    {\r\n      console.log('click Copy');\r\n      var text=document.getElementById(\"exampleFormControlTextarea1\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"text-copied!\",\"success\");\r\n    }\r\n\r\n    const clickSpace=()=>\r\n    {\r\n        console.log(\"handling space\") ;\r\n        let str=text.split(/[ ]+/);\r\n        setText(str.join(\" \"));\r\n        props.showAlert(\"unnecessary spaces are removed\",\"success\");\r\n    }\r\n\r\n\r\n    const handleOnChange=(event)=>\r\n    {\r\n        console.log(\"Changed\") ;\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text,setText]=useState('Enter the text');\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n <div className=\"container mt-5\">\r\n     {/*\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n<label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">Name</label>\r\n  <input type=\"text\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Name\"/>\r\n</div>\r\n <div className=\"mb-3\">\r\n  <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">Email address</label>\r\n  <input type=\"email\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"name@example.com\"/>\r\n</div>  */}\r\n\r\n<div className=\" container mb-3\" >\r\n  <label htmlFor=\"exampleFormControlTextarea1\"  className=\"form-label\"><h1 style={{color:props.mode ==='light'?'blue':'white'},{color:props.mode ==='info'?'blue':'black'}}>ALPHABET_CONVERTERS</h1></label>\r\n  <textarea className=\"form-control text-yellow\" style={{backgroundColor:props.mode ==='light'?'light':'dark'}} value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\r\n</div>\r\n\r\n\r\n<button className=\"btn btn-primary mx-2\" onClick={clickspUp}>\r\nConvert Upper from lower\r\n</button>\r\n\r\n<button className=\"btn btn-secondary mx-2\" onClick={clickspLw}>\r\nConvert Lower from Upper\r\n</button>\r\n\r\n<button className=\"btn btn-info mx-2\" onClick={clickMax}>\r\nMax repeated char\r\n</button>\r\n\r\n<button className=\"btn btn-success mx-2\" onClick={clickMaxW}>\r\nMax repeated word\r\n</button>\r\n\r\n<button className=\"btn btn-warning mx-2\" onClick={clickCopy}>\r\n Copy_Text\r\n</button>\r\n\r\n<button className=\"btn btn-success mx-2\" onClick={clickSpace}>\r\nManage Space\r\n</button>\r\n\r\n<button className=\"btn btn-info mx-2\" onClick={clickClear}>\r\nClear Terminal\r\n</button>\r\n\r\n</div>\r\n<div className=\"container mt-5\">\r\n<hr/>\r\n<h1 style={{color:props.mode ==='light'?'blue':'white'}} >Overall Summary</h1>\r\n<p style={{color:props.mode ==='light'?'blue':'white'}} >Letters == {text.length}</p>\r\n<p style={{color:props.mode ==='light'?'blue':'white'}}>Words == {text.split(\" \").length}</p>\r\n<p style={{color:props.mode ==='light'?'blue':'white'}} >Time == {0.008*text.split(\" \").length}</p>\r\n<p style={{color:props.mode ==='light'?'blue':'white'}} >Current string == {text.length!==0?text:\"plz enter the text\"}</p>\r\n\r\n<hr/>\r\n\r\n</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'   //type impt for it\r\nimport { Link } from 'react-router-dom'\r\n\r\n//let name=\"saurabh patil\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div><nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} pt-3`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\" >{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">HOME</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutTxt}</Link>\r\n              </li>\r\n\r\n              <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  OPTIONS\r\n                </a>\r\n\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li><a className=\"dropdown-item\" href=\"/\">A</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">B</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">C</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">D</a></li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n               \r\n              </li>\r\n            </ul>\r\n\r\n            <div className={`form-check form-switch text-${props.mode}`}>\r\n         <input className=\"form-check-input\" onClick={props.enableMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n         <label className=\"form-check-label\" htmlFor=\"flexSwitchDefault\">mode-1</label>\r\n       </div>&nbsp;\r\n       <div className={`form-check form-switch text-${props.mode}`}>\r\n         <input className=\"form-check-input\" onClick={props.enableModex} type=\"checkbox\" id=\"flexSwitchCheckDefault2\"/>\r\n         <label className=\"form-check-label\" htmlFor=\"flexSwitchDefault\">mode-2</label>\r\n       </div>\r\n\r\n           \r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n     \r\n           {/* <div className=\"blank\">\r\n            <nav>\r\n              <li>HOME</li>\r\n              <li>ABOUS US</li>\r\n              <li>CONTACT US</li>\r\n              <li>BACK</li>\r\n            </nav>\r\n            </div>\r\n      \r\n          <div className=\"container\">\r\n          <h1>hello <b>{name}</b></h1>\r\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Impedit, nisi quos! Aliquam quasi, \r\n          ipsam minus id in distinctio labore totam asperiores nesciunt cum.\r\n          </div>  */}\r\n      \r\n          \r\n          \r\n          \r\n          </div>\r\n\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    aboutTxt:PropTypes.string,\r\n}\r\n\r\n\r\nNavbar.defaultProps={\r\n    title:\"set name\",\r\n    aboutTxt:\"ABOUT US\"\r\n}\r\n\r\n// Navbar.defaultProps={\r\n//     title:\"set name\",\r\n//     aboutTxt:\"set about\"\r\n// }\r\n\r\n\r\n\r\n//type rfc fot above syntax,impt for props syntax","import React, { useState } from \"react\";\r\n\r\nconst TextArea = () => {\r\n\r\n    \r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    return (\r\n        <>\r\n        \r\n      <div className=\"container mt-5\">\r\n      <h1>Counting_Words</h1>\r\n        <textarea className=\"form-control\"\r\n          placeholder=\"Enter you data here!\" rows=\"5\" col=\"10\"\r\n          onChange={(e) => setCharacterCount(e.target.value.length)}\r\n        ></textarea>\r\n        <p>Total Number of characters: {characterCount}</p>\r\n      </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default TextArea;  ","\r\n//type rfc for react component based functions//\r\n\r\n\r\nimport React ,{ useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [styleSP, setStyleSP] = useState(\r\n        {\r\n          color:\"red\",\r\n          backgroundColor:\"yellow\",\r\n          \r\n\r\n        }\r\n    );\r\n\r\n    const sty=()=>{\r\n        \r\n        if(styleSP.color === \"red\")\r\n        {\r\n            setStyleSP({\r\n                color:\"green\",\r\n                backgroundColor:\"violet\",\r\n               \r\n            })\r\n        }\r\n        else{\r\n\r\n            \r\n                setStyleSP({\r\n                    color:\"red\",\r\n                    backgroundColor:\"yellow\",\r\n                })\r\n            \r\n    \r\n\r\n             }\r\n    }\r\n\r\n   \r\n    \r\n    return (\r\n            <>\r\n\r\n            <div className=\"container mt-5\" style={styleSP}>\r\n                <h2>ABOUT US</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNameNamees that we use to style each element. These classNameNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div className=\"container mt-5\">\r\n<button className=\"btn btn-success\" onClick={sty}>New Theme Mode</button>\r\n</div>\r\n\r\n</div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n      const capitals=(word)=>\r\n      {\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n\r\n      }\r\n   \r\n  return (\r\n    \r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{capitals(props.alert.type)}</strong><strong> : {props.alert.msg}</strong> \r\n</div>\r\n\r\n    \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport TextFm from './components/Textfm';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea'\nimport About from './components/About';\nimport React, { useState } from \"react\";\nimport Alert from './components/Alert';\n\n//react router dom\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport { Routes } from 'react-router-dom';\n\n\nfunction App() {\n\n  const [mode,setMode]=useState('light');  \n  const [alert,setAlert]=useState(null);\n  \n const showAlert=(message,type)=>\n {\n\n   setAlert(\n     {\n       msg:message,\n       type:type\n     }\n   )\n     setTimeout(()=>\n     {\n         setAlert(null);\n\n     },3000);\n\n   \n\n\n }\n\n  const toggles=()=>\n  {\n    if(mode===\"light\")\n    {\n      setMode('dark')\n      document.body.style.backgroundColor=\"grey\";\n      showAlert(\"theme 2 is enabled\",'success');\n    }\n     else\n     {\n       setMode('light')\n       document.body.style.backgroundColor=\"white\";\n       showAlert(\"default theme is enabled\",'success');\n    }\n\n  }\n\n  \n\n  const tg=()=>\n  {\n    if(mode===\"light\")\n    {\n      setMode('info')\n      showAlert(\"theme 2 is enabled\",'success');\n    }\n     else\n     {\n       setMode('light')\n       showAlert(\"theme 3 is enabled\",'success');\n     }\n\n  }\n\n\n  \n  return (\n    <>\n     <Router>\n    <Navbar title=\"$$-app\" mode={mode} enableMode={toggles} enableModex={tg}/> \n    <Alert alert={alert}/>\n    <Routes>\n          <Route exact path=\"/about\" element={<About/>}/>\n          <Route exact path=\"/\" element={<TextFm heading=\"text-form\" mode={mode} showAlert={showAlert}/>}/>\n          <Route exact path=\"/text\" element={<TextArea/>}/>  \n      </Routes>\n    </Router>\n  \n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}